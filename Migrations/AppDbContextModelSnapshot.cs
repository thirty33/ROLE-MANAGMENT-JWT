// <auto-generated />
using ApiPeople.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiPeople.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApiPeople.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("ApiPeople.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "john.doe@example.com",
                            Name = "John Doe",
                            PasswordHash = new byte[] { 7, 63, 4, 81, 169, 90, 56, 118, 171, 253, 126, 7, 149, 22, 161, 180, 92, 175, 127, 138, 4, 146, 207, 183, 15, 234, 201, 219, 195, 168, 241, 225, 136, 116, 53, 224, 24, 82, 112, 84, 227, 215, 82, 74, 37, 213, 89, 92, 174, 196, 193, 128, 216, 35, 238, 42, 123, 131, 69, 26, 163, 191, 110, 176 },
                            PasswordSalt = new byte[] { 243, 14, 222, 90, 86, 108, 29, 28, 186, 21, 20, 1, 125, 110, 30, 153, 31, 97, 230, 103, 169, 232, 43, 95, 238, 31, 5, 154, 200, 121, 158, 189, 204, 90, 67, 209, 175, 175, 186, 129, 159, 245, 235, 175, 132, 80, 77, 240, 129, 129, 135, 162, 97, 255, 121, 102, 200, 218, 106, 215, 190, 44, 206, 62, 22, 144, 171, 122, 17, 226, 251, 16, 11, 106, 203, 114, 94, 107, 118, 168, 150, 105, 0, 136, 190, 151, 93, 126, 227, 117, 63, 9, 83, 41, 110, 81, 13, 216, 66, 33, 233, 121, 137, 74, 174, 112, 222, 8, 220, 91, 27, 155, 128, 171, 185, 53, 251, 85, 158, 253, 103, 128, 157, 70, 157, 72, 173, 100 },
                            Username = "John"
                        },
                        new
                        {
                            Id = 2,
                            Email = "jane.smith@example.com",
                            Name = "Jane Smith",
                            PasswordHash = new byte[] { 214, 117, 28, 126, 157, 41, 94, 219, 206, 20, 5, 237, 33, 150, 60, 63, 237, 27, 176, 115, 243, 177, 8, 75, 128, 56, 1, 238, 1, 75, 86, 249, 228, 212, 19, 144, 250, 254, 23, 139, 1, 83, 19, 115, 144, 252, 91, 63, 248, 178, 151, 96, 166, 185, 107, 153, 143, 160, 220, 184, 196, 210, 199, 168 },
                            PasswordSalt = new byte[] { 51, 48, 177, 59, 177, 67, 44, 24, 249, 34, 31, 144, 30, 41, 155, 240, 70, 47, 249, 144, 193, 153, 14, 125, 110, 139, 36, 46, 81, 124, 242, 88, 97, 104, 79, 145, 202, 72, 156, 143, 201, 70, 226, 157, 17, 150, 42, 211, 222, 101, 24, 64, 109, 46, 6, 237, 164, 134, 213, 80, 139, 152, 196, 195, 224, 115, 239, 108, 134, 225, 97, 6, 88, 189, 227, 234, 72, 60, 204, 181, 184, 70, 200, 122, 115, 206, 188, 119, 39, 162, 36, 55, 70, 21, 162, 126, 86, 55, 63, 30, 218, 26, 214, 54, 161, 138, 253, 11, 133, 255, 6, 183, 255, 105, 245, 72, 153, 216, 225, 73, 72, 17, 140, 124, 207, 244, 104, 96 },
                            Username = "Jane"
                        });
                });

            modelBuilder.Entity("ApiPeople.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("ApiPeople.Models.UserRole", b =>
                {
                    b.HasOne("ApiPeople.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiPeople.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiPeople.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ApiPeople.Models.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
